21. What is inheritance?
- Inheritance in dart is defined as the process in which one class derive the properties and characteristics of another class. It is helpful as it provides an ability with which we can create a new class from an existing class.

22. Which inheritance is not supported by Dart? Why? B3. What is advantage of inheritance?
- Multiple Inheritance: Dart does not support multiple inheritance, meaning a class cannot inherit from multiple classes simultaneously. Multi-level Inheritance: In this type, a derived class is created from another derived class, forming a chain of inheritance.  It is helpful as it provides an ability with which we can create a new class from an existing class.

23. Difference between inheritance and encapsulation. B5. Difference between inheritance and abstraction.
- Encapsulation is a mechanism that binds together code and the data it manipulates whereas Inheritance is the mechanism by which a class acquires the properties and methods of another class.
- Abstraction hide the implementation details and only show the functionality. It reduce the code complexity. Inheritance create a class using a properties of another class. It improve the code reusability.

24. Difference between inheritance and polymorphism.
- Inheritance supports the concept of reusability and reduces code length in object-oriented programming. Polymorphism allows the object to decide which form of the function to implement at compile-time (overloading) as well as run-time (overriding).

25. Can we override static method in Dart?
- You can't override static methods in Dart. The two static methods you declared there are in fact two different static methods, not the same, overriden one. Answer for a different question, but related: Dart doesn't inherit static methods to derived classes.

26. Can we overload static method in Dart?
- Yes, You can overrload static methods in Dart. We can have two or more static methods with the same name, but differences in input parameters.

27. Can a class implement more than one interface? Can a class extend more than one class in Dart?
- Dart uses class declarations to define interfaces, and classes implementing these interfaces must fulfil the contract by implementing all the required methods and instance variables. Multiple interfaces can be implemented by a single class for added flexibility.
- Dart doesn't support multiple inheritance, which means a class cannot extend more than one class.

28. Can an interface extend more than one interface in Dart?
- An interface can extend other interfaces, just as a class subclass or extend another class. However, whereas a class can extend only one other class, an interface can extend any number of interfaces.

29. What will happen if a class implements two interfaces and they both have a method with same name and signature?
- Interfaces only proscribe a method name and signature. If both interfaces have a method of exactly the same name and signature, the implementing class can implement both interface methods with a single concrete method.

30. Can we pass an object of a subclass to a method expecting an object of the super class? Are static members inherited to sub classes?
- Yes, you can pass that because subclass and superclass are related to each other by Inheritance which provides IS-A property.
- It is not possible. static members are not part of the class interface. static methods are just a scope-restricted form of global functions.
  But, Static members are inherited to sub classes in java.

31. What happens if the parent and the child class have a field with same identifier? Are constructors and initializers also inherited to sub classes?
- Sub class field will hide the Super class field.
- A subclass inherits all the members (fields, methods, and nested classes) from its superclass. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass.

32. How do you restrict a member of a class from inheriting by its sub classes?
- You can prevent a class from being subclassed by using the final keyword in the class's declaration. Similarly, you can prevent a method from being overridden by subclasses by declaring it as a final method. An abstract class can only be subclassed; it cannot be instantiated.

33. How do you implement multiple inheritance in Dart?
- No, Dart does not support multiple implementation inheritance. Dart has interfaces, and like most other similar languages it has multiple interface inheritance. For implementation, there is only a single super-class chain that a class can inherit member implementations from.

34. Can a class extend by itself in Dart?
- A class cannot extend itself since it IS itself, so it is not a subclass. Inner classes are allowed to extend the outer class because those are two different classes.

35. How do you override a private method in Dart?
- The overriding method allows a method in a child class to override the same method in the parent class. Use the super keyword to call the same method from the parent class.

36. When to overload a method in Dart and when to override it?
- Overriding is done so that a child class can give its implementation to the method that is already provided by the parent class. In this case, the method in the parent class is called the overridden method and the method in the child class is called the overriding method.

37. What the order is of extends and implements keyword on Dart class declaration?
- In Dart a class can only extend one class. Implements: Every class implicitly defines an interface containing all the instance members of the class and of any interfaces it implements.

38. How do you prevent overriding a Dart method without using the final modifier?
- In short, apart from final modifier, you can also use static and private modifier to prevent a method from being overridden.

39. What are the rules of method overriding in Dart?
- Rules for Method Overriding
	* The method which we want to override can only be written in the subclass, not in the same class.
	* The return type should be the same as in the method present in the superclass.
	* The argument list should be the same as in the method present in the superclass.

40. Difference between method overriding and overloading in Dart.
- The most basic difference here is that overloading is achieved in the same class, whereas overriding requires a parent and a child class at the minimum. Another key concept to keep in mind is that overloaded methods are bound at compile time to the method calls.

41. What happens when a class implements two interfaces and both declare field (variable) with same name?
- If a type implements two interfaces, and each interface define a method that has identical signature, then in effect there is only one method, and they are not distinguishable. If, say, the two methods have conflicting return types, then it will be a compilation error.

42. Can a subclass instance method override a superclass static method? 
- An instance method cannot override a static method, and a static method cannot hide an instance method. For example, the following program has two compiler errors. In a subclass (or Derived Class), we can overload the methods inherited from the superclass.

43. Can a subclass static method hide superclass instance method?
- An instance method cannot override a static method, and a static method cannot hide an instance method. For example, the following program has two compiler errors. In a subclass (or Derived Class), we can overload the methods inherited from the superclass.

44. Can a superclass access subclass member?
- No, a superclass has no knowledge of its subclasses.

45. Difference between object oriented and object based language.
- 	* Object Based Languages
		- Object based languages supports the usage of object and encapsulation.
		- They does not support inheritance or, polymorphism or, both.
		- Object based languages does not supports built-in objects.
		- Javascript, VB are the examples of object bases languages.
	* Object Oriented Languages
		- Object Oriented Languages supports all the features of Oops including inheritance and polymorphism.
		- They support built-in objects.
		- C#, Java, VB. Net are the examples of object oriented languages.